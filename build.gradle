import java.util.concurrent.TimeUnit

buildscript {
    repositories {
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'com.github.GTNH2:ForgeGradle:FG_1.2-SNAPSHOT'
    }
}

plugins {
    id("org.ajoberstar.grgit") version("3.1.1")
}

apply plugin: 'forge'
apply plugin: 'idea'

idea {
    module {
        inheritOutputDirs = true
        downloadJavadoc = true
        downloadSources = true
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor(0, TimeUnit.SECONDS)
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

version = modVersion
group= modGroup
archivesBaseName = modId

minecraft {
    version = "${minecraftVersion}-${forgeVersion}-${minecraftVersion}"
    runDir = "run"
}

repositories {
    maven {
        name = "CodeChicken"
        url = "http://chickenbones.net/maven/"
    }
    maven {
        url = "https://jitpack.io"
    }
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }
    maven {
        name = "appleCore"
        url = "http://www.ryanliptak.com/maven/"
    }
    ivy {
        name = "gtnh_download_source"
        artifactPattern("http://downloads.gtnewhorizons.com/Mods_for_Jenkins/[module]-[revision].[ext]")
    }
    maven {
        name = "UsrvDE/GTNH"
        url = "http://jenkins.usrv.eu:8081/nexus/content/repositories/releases/"
    }
    maven {
        name = "gt"
        url = "https://gregtech.overminddl1.com/"
    }
    maven {
        url "https://cursemaven.com"
    }
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/repository/maven-public"
    }
}

dependencies {
    annotationProcessor("org.ow2.asm:asm-debug-all:5.0.3")
    annotationProcessor("com.google.guava:guava:24.1.1-jre")
    annotationProcessor("com.google.code.gson:gson:2.8.6")
    annotationProcessor("org.spongepowered:mixin:0.8-SNAPSHOT") // using 0.8 to workaround a issue in 0.7 which fails mixin application
    compile("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        // Mixin includes a lot of dependencies that are too up-to-date
        exclude module: "launchwrapper"
        exclude module: "guava"
        exclude module: "gson"
        exclude module: "commons-io"
        exclude module: "log4j-core"
    }
    compile "com.github.GTNewHorizons:SpongeMixins:1.3.3:dev"

    compile("com.github.Hugobros3:Enklume:master-SNAPSHOT")
    compile("com.github.GTNewHorizons:GT5-Unofficial:visual-prospecting-interop-SNAPSHOT:dev") {
        setChanging(true)
    }
    compile("curse.maven:journeymap-32274:2367915")
}

def mixinConfigJson = "mixins." + modId + ".json"
def mixingConfigRefMap = "mixins." + modId + ".refmap.json"
def refMap = "${tasks.compileJava.temporaryDir}" + File.separator + mixingConfigRefMap
def mixinSrg = "${tasks.reobf.temporaryDir}" + File.separator + "mixins.srg"


jar {
    from refMap
    manifest {
        attributes([
                "TweakClass"                 : "org.spongepowered.asm.launch.MixinTweaker",
                "MixinConfigs"               : mixinConfigJson,
                "FMLCorePluginContainsFMLMod": true,
                "ForceLoadAsMod"             : true
        ])
    }
    getArchiveAppendix().value("${minecraft.version}")
    getArchiveVersion().value("${project.version}")
}

reobf {
    addExtraSrgFile mixinSrg
}

afterEvaluate {
    tasks.compileJava {
        options.compilerArgs += [
                "-AreobfSrgFile=${tasks.reobf.srg}",
                "-AoutSrgFile=${mixinSrg}",
                "-AoutRefMapFile=${refMap}",
                // Elan: from what I understand they are just some linter configs so you get some warning on how to properly code
                "-Xlint:-sunapi",
                "-XDenableSunApiLintControl",
                "-XDignore.symbol.file"
        ]
    }
}

runClient {
    args "--tweakClass", "org.spongepowered.asm.launch.MixinTweaker",
            // Having mixin in the same jar as normal mode makes FML ignore it.
            // It should be fine in production, however I suppose it's not properly read here.
            // The only option which worked for me was adding it as a mod explicitly via next argument:
            "--mods=../build/libs/$modId-${project.minecraft.version}-${modVersion}.jar"
}

runServer {
    args "--tweakClass", "org.spongepowered.asm.launch.MixinTweaker",
            // Having mixin in the same jar as normal mode makes FML ignore it.
            // It should be fine in production, however I suppose it's not properly read here.
            // The only option which worked for me was adding it as a mod explicitly via next argument:
            "--mods=../build/libs/$modId-${project.minecraft.version}-${modVersion}.jar"
}


processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand "mcversion": project.minecraft.version,
                "version": modVersion,
                "modid": modId,
                "modName": modName
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task sourcesJar(type: Jar) {
    from (sourceSets.main.allJava)
    from (file("$projectDir/LICENSE"))

    getArchiveClassifier().set('sources')
}

task devJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set("dev")
}


artifacts {
    archives sourcesJar
    archives devJar
}
